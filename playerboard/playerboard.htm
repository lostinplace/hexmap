<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <title></title>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript" ></script>
    <script type="application/javascript">
        $(function Engine() {
            var frameInterval,
                playerBoard,
                canvasObj;
            
            var sidelength = 35;
            var cellHeight = Math.sin(Math.PI / 3) * sidelength * 1.5;
            var cellWidth = sidelength*(1+Math.cos(Math.PI/3));

            var borderBoxWidth = Math.cos(Math.PI/3)*sidelength;
            var sideBoxWidth = (cellWidth - borderBoxWidth) / 2;
            //var diagLength = Math.sqrt(Math.pow(borderBoxWidth, 2) + Math.pow(cellHeight));

            Initialize();
            drawShape();

            function drawBorderLine(context) {

            }

            function Initialize() {
                playerBoard = BuildBoard(10, 10);
                canvasObj = $('canvas')[0];
                var tmpContext = canvasObj.getContext('2d');
                var xScale, yScale;
                for (var x = 0; x < playerBoard.length; x++) {
                    for (var y = 0; y < playerBoard[x].length; y++) {
                        xScale = (x * cellWidth) + 1;
                        yScale = (y * cellHeight) + 1;
                        var dir = (x + y) % 2;

                        tmpContext.strokeStyle = 'rgb(240,240,240)';
                        tmpContext.strokeRect(xScale, yScale, cellWidth, cellHeight);

                        tmpContext.lineWidth = 1.5;
                        tmpContext.strokeStyle = 'rgb(255,0,0)';

                        tmpContext.beginPath();
                        tmpContext.moveTo((xScale + sideBoxWidth) + (borderBoxWidth * dir), yScale);
                        tmpContext.lineTo((xScale + sideBoxWidth + borderBoxWidth) - (borderBoxWidth * dir), yScale + cellHeight);
                        tmpContext.lineTo((xScale + sideBoxWidth) + (borderBoxWidth * dir), yScale + cellHeight);

                        //tmpContext.closePath();
                        tmpContext.stroke();


                        //tmpContext.strokeRect(xScale + sideBoxWidth, yScale, borderBoxWidth, cellHeight);
                        tmpContext.strokeStyle = 'rgb(240,240,240)';
                        tmpContext.strokeRect(xScale, yScale, cellWidth, cellHeight);

                    }

                }
            }

            function drawShape() {
                // get the canvas element using the DOM
                var canvas = $('canvas')[0];

                // Make sure we don't execute when canvas isn't supported
                if (canvas.getContext) {

                    // use getContext to use the canvas for drawing
                    var ctx = canvas.getContext('2d');

                    // Draw shapes

                    //ctx.strokeRect(50, 50, 50, 50);
                }
            }
            function BuildBoard(aHeight, aWidth) {
                var tmpBoard = new Array(aWidth)
                for (var x = 0; x < aWidth; x++) {
                    tmpBoard[x] = new Array(aHeight)
                }
                return tmpBoard;
            }
        }
        );

        
    </script>

</head>
    <body>
    
        <canvas height="600px"  width="600px" style="background-color:transparent">
            
        </canvas>
  
    <svg version="1.1"
     baseProfile="full"
     xmlns="http://www.w3.org/2000/svg">

  <rect width="100%" height="100%" fill="red" />

  <circle cx="150" cy="100" r="80" fill="green" />

  <text x="150" y="125" font-size="60" text-anchor="middle" fill="white">SVG</text>

</svg>

</body>
</html>
